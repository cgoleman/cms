Index: build/main.js
===================================================================
--- util/build/main.js	(revision 30110)
+++ util/build/main.js	(working copy)
@@ -48,8 +48,7 @@
 			util.debug(inspect ? util.inspect(it, false, depth) : it);
 		};
 
-		// TODO: make this real
-		has.add("is-windows", 0);
+		has.add("is-windows", /win/.test(process.platform));
 	}else if(has("host-rhino")){
 		define("commandLineArgs", [], function(){
 			var result = [];
Index: build/transforms/writeOptimized.js
===================================================================
--- util/build/transforms/writeOptimized.js	(revision 30110)
+++ util/build/transforms/writeOptimized.js	(working copy)
@@ -172,31 +172,44 @@
 			runJava, //function, defined later
 			oldSendJob = sendJob, //preserves reference if sendJob is replaced
 			child_process = require.nodeRequire("child_process"),
-			javaClasses = fileUtils.catPath(buildRoot, "closureCompiler/compiler.jar") + ":" + fileUtils.catPath(buildRoot, "shrinksafe/js.jar") + ":" + fileUtils.catPath(buildRoot, "shrinksafe/shrinksafe.jar");
-			if(global.process.platform === 'cygwin'){
-				//assume we're working with Windows Java, and need to translate paths
-				runJava = function(cb){
-					child_process.exec("cygpath -wp '" + javaClasses + "'", function(err, stdout){
-						javaClasses = stdout.trim();
-						child_process.exec("cygpath -w '" + optimizerRunner + "'", function(err, stdout){
-							optimizerRunner = stdout.trim();
-							cb();
-						});
+			isCygwin = global.process.platform === 'cygwin',
+			separator = has("is-windows") ? ";" : ":",
+			javaClasses = fileUtils.catPath(buildRoot, "closureCompiler/compiler.jar") + separator + fileUtils.catPath(buildRoot, "shrinksafe/js.jar") + separator + fileUtils.catPath(buildRoot, "shrinksafe/shrinksafe.jar");
+		if(isCygwin){
+			//assume we're working with Windows Java, and need to translate paths
+			runJava = function(cb){
+				child_process.exec("cygpath -wp '" + javaClasses + "'", function(err, stdout){
+					javaClasses = stdout.trim();
+					child_process.exec("cygpath -w '" + optimizerRunner + "'", function(err, stdout){
+						optimizerRunner = stdout.trim();
+						cb();
 					});
-				};
-				//wrap sendJob calls to convert to windows paths first
-				sendJob = function(src, dest, optimizeSwitch, copyright){
-					child_process.exec("cygpath -wp '" + src + "'", function(err, srcstdout){
-						child_process.exec("cygpath -wp '" + dest + "'", function(err, deststdout){
-							oldSendJob(srcstdout.trim(), deststdout.trim(),
-								optimizeSwitch, copyright);
-						});
+				});
+			};
+			//wrap sendJob calls to convert to windows paths first
+			sendJob = function(src, dest, optimizeSwitch, copyright){
+				child_process.exec("cygpath -wp '" + src + "'", function(err, srcstdout){
+					child_process.exec("cygpath -wp '" + dest + "'", function(err, deststdout){
+						oldSendJob(srcstdout.trim(), deststdout.trim(),
+							optimizeSwitch, copyright);
 					});
-				};
-			}else{
-				//no waiting necessary, pass through
-				runJava = function(cb) { cb(); };
-			}
+				});
+			};
+		}else if(has("is-windows")){
+			runJava = function(cb){
+				javaClasses = fileUtils.normalize(javaClasses);
+				optimizerRunner = fileUtils.normalize(optimizerRunner);
+				cb();
+			};
+			sendJob = function(src, dest, optimizeSwitch, copyright){
+				var wsrc = fileUtils.normalize(src),
+					wdest = fileUtils.normalize(dest);
+				oldSendJob(wsrc, wdest, optimizeSwitch, copyright);
+			};
+		}else{
+			//no waiting necessary, pass through
+			runJava = function(cb) { cb(); };
+		}
 		runJava(function() {
 			for(i = 0; i < bc.maxOptimizationProcesses; i++) {(function(){
 				var
